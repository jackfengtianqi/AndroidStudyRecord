<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context="com.example.layoutdemo.View.TextViewActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

    <!--带阴影的TextView
    android:shadowColor:设置阴影颜色,需要与shadowRadius一起使用哦!
    android:shadowRadius:设置阴影的模糊程度,设为0.1就变成字体颜色了,建议使用3.0
    android:shadowDx:设置阴影在水平方向的偏移,就是水平方向阴影开始的横坐标位置
    android:shadowDy:设置阴影在竖直方向的偏移,就是竖直方向阴影开始的纵坐标位置
    -->
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:shadowColor="#F9F900"
        android:shadowDx="10.0"
        android:shadowDy="10.0"
        android:shadowRadius="3.0"
        android:text="带阴影的TextView"
        android:textColor="#4A4AFF"
        android:textSize="30sp" />

    <!--带边框的TextView
    <solid android:color = "xxx"> 这个是设置背景颜色的
    <stroke android:width = "xdp" android:color="xxx"> 这个是设置边框的粗细,以及边框颜色的
    <padding androidLbottom = "xdp"...> 这个是设置边距的
    <corners android:topLeftRadius="10px"...> 这个是设置圆角的
    <gradient> 这个是设置渐变色的,可选属性有: startColor:起始颜色
    endColor:结束颜色 centerColor:中间颜色 angle:方向角度,等于0时,从左到右,然后逆时针方向转,
    当angle = 90度时从下往上 type:设置渐变的类型
    -->
    <TextView
        android:id="@+id/txtOne"
        android:layout_width="200dp"
        android:layout_height="64dp"
        android:background="@drawable/txt_rectborder"
        android:gravity="center"
        android:text="矩形边框的TextView"
        android:textSize="18sp" />

    <TextView
        android:id="@+id/txtTwo"
        android:layout_width="200dp"
        android:layout_height="64dp"
        android:layout_marginTop="10dp"
        android:background="@drawable/txt_radiuborder"
        android:gravity="center"
        android:text="圆角边框的TextView"
        android:textSize="18sp" />

    <!--带图片(drawableXxx)的TextView
    设置图片的核心其实就是:drawableXxx;可以设置四个方向的图片:
    drawableTop(上),drawableButtom(下),drawableLeft(左),drawableRight(右) 另外,
    你也可以使用drawablePadding来设置图片与文字间的间距！
    -->

    <TextView
        android:id="@+id/txtZQD"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:drawableLeft="@drawable/user"
        android:drawableTop="@drawable/user"
        android:drawableRight="@drawable/user"
        android:drawableBottom="@drawable/user"
        android:drawablePadding="10dp"
        android:text="张全蛋" />

    <!--使用autoLink属性识别链接类型
    all就是全部都包含,自动识别协议头~ 在Java代码中可以调用setAutoLinkMask(Linkify.ALL);
    这个时候可以不写协议头,autolink会自动识别，但是还要为这个TextView设置：
    setMovementMethod(LinkMovementMethod.getInstance()); 不然点击了是没效果的！
    -->
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:autoLink="all"
        android:text="https://www.kotlincn.net/docs/kotlin-docs.pdf" />

    <!--TextView玩转HTML
    常用如下
    <font>：设置颜色和字体。
    <big>：设置字体大号
    <small>：设置字体小号
    <i><b>：斜体粗体
    <a>：连接网址
    <img>：图片
    如果直接setText的话是没作用的，我们需要调用Html.fromHtml()方法将字符串转换为CharSequence接口，
    然后再进行设置，如果我们需要相应设置，需要为TextView进行设置，调用下述方法：
    Java setMovementMethod(LinkMovementMethod.getInstance())
    -->

    <TextView
        android:id="@+id/txt_three"
        android:layout_width="200dp"
        android:layout_height="64dp"
        android:gravity="center"
        android:textSize="18sp" />

    <!-- SpannableString&SpannableStringBuilder定制文本
    SpannableString可供我们使用的API有下面这些：
    BackgroundColorSpan 背景色
    ClickableSpan 文本可点击，有点击事件
    ForegroundColorSpan 文本颜色（前景色）
    MaskFilterSpan 修饰效果，如模糊(BlurMaskFilter)、浮雕(EmbossMaskFilter)
    MetricAffectingSpan 父类，一般不用
    RasterizerSpan 光栅效果
    StrikethroughSpan 删除线（中划线）
    SuggestionSpan 相当于占位符
    UnderlineSpan 下划线
    AbsoluteSizeSpan 绝对大小（文本字体）
    DynamicDrawableSpan 设置图片，基于文本基线或底部对齐。
    ImageSpan 图片
    RelativeSizeSpan 相对大小（文本字体）
    ReplacementSpan 父类，一般不用
    ScaleXSpan 基于x轴缩放
    StyleSpan 字体样式：粗体、斜体等
    SubscriptSpan 下标（数学公式会用到）
    SuperscriptSpan 上标（数学公式会用到）
    TextAppearanceSpan 文本外貌（包括字体、大小、样式和颜色）
    TypefaceSpan 文本字体
    URLSpan 文本超链接
    -->

    <TextView
        android:id="@+id/text_four"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        />
    <TextView
        android:id="@+id/text_five"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        />


    <!--实现部分可点击的TextView 相信玩过QQ空间和微信朋友圈的朋友对下面的东东并不陌生吧，
    我们可以点击 对应的用户然后进入查看用户相关的信息是吧！
    -->
    <TextView
        android:id="@+id/text_six"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        />


    <!--实现跑马灯效果-->
    <TextView
        android:id="@+id/text_seven"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:singleLine="true"
        android:ellipsize="marquee"
        android:marqueeRepeatLimit="marquee_forever"
        android:focusable="true"
        android:focusableInTouchMode="true"
        android:text="山外之山，繁华落尽，道出万千纠结，莫名心中惆怅，百感交集"/>

    <!-- 设置TextView字间距和行间距
    android:lineSpacingExtra：设置行间距，如"3dp"
    android:lineSpacingMultiplier：设置行间距的倍数，如"1.2"
    Java代码中可以通过: setLineSpacing方法来设置
    -->

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:lineSpacingExtra="3dp"
        android:lineSpacingMultiplier="1.2"
        android:text="本节对Android中的TextView控件进行了详细的解析，提供了开发中常见的
        一些问题的解决方法，相信 会为你的实际开发带来大大的便利，另外，笔者能力有限，
        写出来的东西可能有些纰漏，欢迎指出， 不胜感激~另外，转载请注明出处：coder-pig！谢谢~"/>

    </LinearLayout>

</ScrollView>
